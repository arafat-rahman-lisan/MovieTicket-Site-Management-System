// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Movie_Site_Management_System.Data;

#nullable disable

namespace Movie_Site_Management_System.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250914225210_MovieController")]
    partial class MovieController
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Movie_Site_Management_System.Models.Booking", b =>
                {
                    b.Property<long>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("BookingId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("ShowId")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("TicketQuantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("BookingId");

                    b.HasIndex("ShowId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("Movie_Site_Management_System.Models.BookingSeat", b =>
                {
                    b.Property<long>("BookingId")
                        .HasColumnType("bigint");

                    b.Property<long>("SeatId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("BookingId", "SeatId");

                    b.HasIndex("SeatId");

                    b.ToTable("BookingSeats");
                });

            modelBuilder.Entity("Movie_Site_Management_System.Models.Hall", b =>
                {
                    b.Property<long>("HallId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("HallId"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("SeatmapVersion")
                        .HasColumnType("int");

                    b.Property<long>("TheatreId")
                        .HasColumnType("bigint");

                    b.HasKey("HallId");

                    b.HasIndex("TheatreId", "Name")
                        .IsUnique();

                    b.ToTable("Halls");
                });

            modelBuilder.Entity("Movie_Site_Management_System.Models.HallSlot", b =>
                {
                    b.Property<long>("HallSlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("HallSlotId"));

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<long>("HallId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("SlotNumber")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("HallSlotId");

                    b.HasIndex("HallId", "SlotNumber")
                        .IsUnique();

                    b.ToTable("HallSlots");
                });

            modelBuilder.Entity("Movie_Site_Management_System.Models.Movie", b =>
                {
                    b.Property<long>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("MovieId"));

                    b.Property<string>("BigPosterPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal?>("ImdbRating")
                        .HasColumnType("decimal(3,1)");

                    b.Property<string>("PosterUrl")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("RatingCertificate")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RuntimeMinutes")
                        .HasColumnType("int");

                    b.Property<string>("SmallPosterPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Synopsis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(160)
                        .HasColumnType("nvarchar(160)");

                    b.HasKey("MovieId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("Movie_Site_Management_System.Models.Seat", b =>
                {
                    b.Property<long>("SeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SeatId"));

                    b.Property<long>("HallId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<int?>("PosX")
                        .HasColumnType("int");

                    b.Property<int?>("PosY")
                        .HasColumnType("int");

                    b.Property<string>("RowLabel")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<int>("SeatNumber")
                        .HasColumnType("int");

                    b.Property<short>("SeatTypeId")
                        .HasColumnType("smallint");

                    b.HasKey("SeatId");

                    b.HasIndex("SeatTypeId");

                    b.HasIndex("HallId", "RowLabel", "SeatNumber")
                        .IsUnique();

                    b.ToTable("Seats");
                });

            modelBuilder.Entity("Movie_Site_Management_System.Models.SeatBlock", b =>
                {
                    b.Property<long>("SeatBlockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SeatBlockId"));

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<long>("SeatId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("SeatBlockId");

                    b.HasIndex("SeatId");

                    b.ToTable("SeatBlocks");
                });

            modelBuilder.Entity("Movie_Site_Management_System.Models.SeatType", b =>
                {
                    b.Property<short>("SeatTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("SeatTypeId"));

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("SeatTypeId");

                    b.ToTable("SeatTypes");
                });

            modelBuilder.Entity("Movie_Site_Management_System.Models.Show", b =>
                {
                    b.Property<long>("ShowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ShowId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("HallSlotId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<long>("MovieId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ShowDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ShowId");

                    b.HasIndex("MovieId");

                    b.HasIndex("HallSlotId", "ShowDate")
                        .IsUnique();

                    b.ToTable("Shows");
                });

            modelBuilder.Entity("Movie_Site_Management_System.Models.ShowNote", b =>
                {
                    b.Property<long>("ShowNoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ShowNoteId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ShowId")
                        .HasColumnType("bigint");

                    b.HasKey("ShowNoteId");

                    b.HasIndex("ShowId");

                    b.ToTable("ShowNotes");
                });

            modelBuilder.Entity("Movie_Site_Management_System.Models.ShowSeat", b =>
                {
                    b.Property<long>("ShowSeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ShowSeatId"));

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<long>("SeatId")
                        .HasColumnType("bigint");

                    b.Property<short>("SeatTypeId")
                        .HasColumnType("smallint");

                    b.Property<long>("ShowId")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("ShowSeatId");

                    b.HasIndex("SeatId");

                    b.HasIndex("SeatTypeId");

                    b.HasIndex("ShowId", "SeatId")
                        .IsUnique();

                    b.ToTable("ShowSeats");
                });

            modelBuilder.Entity("Movie_Site_Management_System.Models.Theatre", b =>
                {
                    b.Property<long>("TheatreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TheatreId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("Lat")
                        .HasColumnType("decimal(9,6)");

                    b.Property<decimal>("Lng")
                        .HasColumnType("decimal(9,6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("TheatreId");

                    b.ToTable("Theatres");
                });

            modelBuilder.Entity("Movie_Site_Management_System.Models.Booking", b =>
                {
                    b.HasOne("Movie_Site_Management_System.Models.Show", "Show")
                        .WithMany("Bookings")
                        .HasForeignKey("ShowId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Show");
                });

            modelBuilder.Entity("Movie_Site_Management_System.Models.BookingSeat", b =>
                {
                    b.HasOne("Movie_Site_Management_System.Models.Booking", "Booking")
                        .WithMany("BookingSeats")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movie_Site_Management_System.Models.Seat", "Seat")
                        .WithMany("BookingSeats")
                        .HasForeignKey("SeatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Seat");
                });

            modelBuilder.Entity("Movie_Site_Management_System.Models.Hall", b =>
                {
                    b.HasOne("Movie_Site_Management_System.Models.Theatre", "Theatre")
                        .WithMany("Halls")
                        .HasForeignKey("TheatreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Theatre");
                });

            modelBuilder.Entity("Movie_Site_Management_System.Models.HallSlot", b =>
                {
                    b.HasOne("Movie_Site_Management_System.Models.Hall", "Hall")
                        .WithMany("HallSlots")
                        .HasForeignKey("HallId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Hall");
                });

            modelBuilder.Entity("Movie_Site_Management_System.Models.Seat", b =>
                {
                    b.HasOne("Movie_Site_Management_System.Models.Hall", "Hall")
                        .WithMany("Seats")
                        .HasForeignKey("HallId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movie_Site_Management_System.Models.SeatType", "SeatType")
                        .WithMany("Seats")
                        .HasForeignKey("SeatTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Hall");

                    b.Navigation("SeatType");
                });

            modelBuilder.Entity("Movie_Site_Management_System.Models.SeatBlock", b =>
                {
                    b.HasOne("Movie_Site_Management_System.Models.Seat", "Seat")
                        .WithMany("SeatBlocks")
                        .HasForeignKey("SeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seat");
                });

            modelBuilder.Entity("Movie_Site_Management_System.Models.Show", b =>
                {
                    b.HasOne("Movie_Site_Management_System.Models.HallSlot", "HallSlot")
                        .WithMany("Shows")
                        .HasForeignKey("HallSlotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Movie_Site_Management_System.Models.Movie", "Movie")
                        .WithMany("Shows")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("HallSlot");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Movie_Site_Management_System.Models.ShowNote", b =>
                {
                    b.HasOne("Movie_Site_Management_System.Models.Show", "Show")
                        .WithMany("ShowNotes")
                        .HasForeignKey("ShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Show");
                });

            modelBuilder.Entity("Movie_Site_Management_System.Models.ShowSeat", b =>
                {
                    b.HasOne("Movie_Site_Management_System.Models.Seat", "Seat")
                        .WithMany("ShowSeats")
                        .HasForeignKey("SeatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Movie_Site_Management_System.Models.SeatType", "SeatType")
                        .WithMany()
                        .HasForeignKey("SeatTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Movie_Site_Management_System.Models.Show", "Show")
                        .WithMany("ShowSeats")
                        .HasForeignKey("ShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seat");

                    b.Navigation("SeatType");

                    b.Navigation("Show");
                });

            modelBuilder.Entity("Movie_Site_Management_System.Models.Booking", b =>
                {
                    b.Navigation("BookingSeats");
                });

            modelBuilder.Entity("Movie_Site_Management_System.Models.Hall", b =>
                {
                    b.Navigation("HallSlots");

                    b.Navigation("Seats");
                });

            modelBuilder.Entity("Movie_Site_Management_System.Models.HallSlot", b =>
                {
                    b.Navigation("Shows");
                });

            modelBuilder.Entity("Movie_Site_Management_System.Models.Movie", b =>
                {
                    b.Navigation("Shows");
                });

            modelBuilder.Entity("Movie_Site_Management_System.Models.Seat", b =>
                {
                    b.Navigation("BookingSeats");

                    b.Navigation("SeatBlocks");

                    b.Navigation("ShowSeats");
                });

            modelBuilder.Entity("Movie_Site_Management_System.Models.SeatType", b =>
                {
                    b.Navigation("Seats");
                });

            modelBuilder.Entity("Movie_Site_Management_System.Models.Show", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("ShowNotes");

                    b.Navigation("ShowSeats");
                });

            modelBuilder.Entity("Movie_Site_Management_System.Models.Theatre", b =>
                {
                    b.Navigation("Halls");
                });
#pragma warning restore 612, 618
        }
    }
}
